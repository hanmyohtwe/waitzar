----------------------------------------------
 The Design Philosophy of the WaitZar Project
----------------------------------------------

Designing and maintaining a big project is difficult. I'm sure all of you once had a favorite software which was later "upgraded" into a slow, ugly, difficult-to-use mess. Seeing this causes you to say "How could the developers get it so _right_ in the first release and then lose touch with the community so badly in the second release?". 

I am writing this document to prevent this problem from happening with WaitZar. This document will list all of the considerations I have in mind whenever I think: "Should we add a new feature to WaitZar?". These should be considered guidelines, not rules. I will explain each one and give a small example of how it has been applied in the past. 

(Most of these apply to WaitZar on Windows, but some are also applicable on Linux.)


----------------------------
Add What the Community Wants
----------------------------
The lead developers choose which features to add to WaitZar. They should try to add features the community wants. This is much more challenging than it sounds.
   * Sometimes it is easy. For example, the famous "April 6th" meeting concluded that users should be able to add custom words to the dictionary. This was added in version 1.4.
   * Sometimes, only the developers could possibly know what will be useful later. For example, the current "config" setup was Seth's idea, and it laid the foundation for LOTS of features the community wanted (like Burglish input, etc.). But no-one had suggested making WaitZar pluggable. 
   * Sometimes community requests are tricky. For example, some users want to remove all encodings except "Unicode" from WaitZar. Acceping this request is wrong, and denying it is wrong too. Instead, we made the set of encodings customizable, so each user can change it to what he or she wants. 
   * As a general rule: never ignore the community. Be happy that they are suggesting new features, because it means that they want to use WaitZar. (You can ignore trolls, of course.)
This is the most important guideline for lead developers. 
   
   
------------------------
Think First, Code Second
------------------------
This is the most important guideline for programmers. When faced with a bugfix or new feature, it's easy to code up a simple solution. However, we encourage coders to think through each new feature and write a short article on the wiki before implementing anything very important. 
   * For example, the wiki article "IDEAKeyMagicDataStructs" explains some of my own thoughts before implementing Key Magic support in WaitZar. 
   
   
----------------------------------
WaitZar will always be Open Source
----------------------------------
No exceptions. The source code of WaitZar must _always_ be openly licensed, freely available, and easy to compile.
   * People have asked if WaitZar will remain free. For Windows and Linux, WaitZar will always be free. Mobile systems like the iPhone and Android are more complicated, since it costs money for a developer's license on those devices. My advice: don't be greedy. 
   
   
----------------------
Single Executable Mode
----------------------
It should be possible to run WaitZar as a single executable file, with no additional files or DLLs. This is intended for internet cafe users, who may wish to download a single executable file to begin using WaitZar. 
   * Not all features have to be enabled in single-executable mode.
   
   
--------------------------
The WaitZar IM Comes First
--------------------------
WaitZar now supports multiple input methods (IMs) like Burglish and Myanmar3. Usually, these can all be supported equally. However, if there is a conflict, then the WaitZar IME is the most important.
   * A great example is with Keyboards. We would like to support the "Parabaik" keyboard. However, it uses CTRL as a hotkey modifier. This might clash with the user's Language hotkey (e.g., if they set it to "Ctrl+L"). Later, we will probably dynamically enable and disable the Ctrl hotkeys if the user is using Parabaik. But for now, it conflicts with WaitZar so it is disabled. 
   * Note that with the Keyboard example, we can still support the Myanmar3, Zawgyi-One, and Ayar keyboards. Nothing is disabled unless it specifically clashes with WaitZar. 
   
   
------------------------------------------
Simple for Beginners, Flexible for Experts
------------------------------------------
WaitZar should not confuse new users. It should be very easy to get started using it. However, it should not remove complex features that expert users need. 
   * Many features of WaitZar are disabled by default, but can be enabled in the config file. 
   * The config files contain _all_ of WaitZar's settings. However, the most popular settings can also be changed using the "Settings" dialog box, which is much easier for new users to understand.
   * Sometimes the simple solution is not correct. For example, we use "Unicode" as the default Encoding, even though most new users prefer Zawgyi-One. New users will sometimes have to check the user's guide; it's unavoidable. 


-----------------------------------------------------
Stability, Performance, and Minimalism -In that order
-----------------------------------------------------
WaitZar must be stable; it must not crash. It must also exhibit good performance on all modern computers, since it will always be running in the background. Finally, it should be minimal; that is, the executable should be small, and the program should solve problems in the simplest acceptable manner. 
   * The choice of C++ is a good example of this balance. We use the (generally faster) STL features like wstrings and vectors instead of (possibly faster) C constructs like pointers and arrays. This also makes debugging easier. We chose C++ instead of Java because C++ is much faster. We chose to use Win32 controls instead of QT because we wanted the compiled executable to be small.
   * Regarding stability, the 1.7 release of WaitZar was delayed several weeks because of a memory-corruption error. We maintain a set of tests that are performed on each release.
   * Minimalist also means "non-intrusive". For example, if a new version of WaitZar is available, the program will show a notification balloon. It will *NOT* use a popup dialog.
   * It should be obvious that Documentation (code comments, wiki articles, etc.) is part of "Stability". 


---------------
  Final Words
---------------
The users of WaitZar are the most important people in the project, so don't do anything that will make WaitZar difficult for them to use. Remember that many of WaitZar's users are in Myanmar, so newer technology (or even fast internet) may not be available to them. Some will be using internet cafe computers, so asking them to "Install Java" or "Update DotNET" might be impossible.  Some users can't read English, so the classic reply of "Read the Manual" won't work. Most of them just want to type in Burmese, with no additional hassle. We should try to make this possible for them.

If new technology changes the nature of WaitZar's development, then this document should be updated. However, please be extremely careful about changing WaitZar's design philosophy. Always consider the users first.

