import os
import sys
import re
from string import Template


#Some constants defining our library
LIBRARY_API_VERSION = '1.0.0'
LIBRARY_VERSION     = '1.0'
LIBRARY_NAME        = 'waitzar'


#Import the path from the user's environment
env = Environment(ENV = {'PATH' : os.environ['PATH']})

#Attempt to fix the path if the user is on windows and the path
# doesn't contain kernel32.lib
extra_libs = []
if env['PLATFORM'] == 'win32':
   extra_libs.append('C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\Lib')
   env['ENV']['TMP'] = os.environ['TMP'] 
   
#Prevent Windows users from messing up their directory structure; hide the "install" alias from them.
if env['PLATFORM'] != 'win32':
   env.Alias('install', '/usr')
   
   
#Requires libboost to build ----we've GOT to clean this up for release.
required_libs = ['boost_python-mt-py26']  
env.Append(CPPPATH = ['/usr/include/python2.6', '/usr/include/boost'])



#Out own builder: template a file with some arguments
#  target = which file(s) to save template output to (use str() to get the paths)
#  source = which file(s) to perform templating on (use str() to get the paths)
#  env    = the construction environment, if needed
#At the moment, we substitute all relevant variables from the build environment
#  You will have to modify this if you need more substituted
def template_file(target, source, env):
    for i in xrange(len(source)):
        #Open, read, close
        srcFile = open(str(source[i]), 'r')
        src = Template(srcFile.read())
        srcFile.close()
        
        #Substitute
        # Add new variables here, as necessary
        # TODO: Maybe we can put this dict. in env? That makes sense...
        src = src.substitute( 
            LIBRARY_API_VERSION = LIBRARY_API_VERSION, 
            LIBRARY_VERSION     = LIBRARY_VERSION, 
            LIBRARY_NAME        = LIBRARY_NAME 
        )
        
        #Open, output, close
        tgt = open(str(target[i]), 'w')
        tgt.write(src)
        tgt.close()

    #Success: return 'None'
    return None
templateBld = Builder(action = template_file,  suffix = '.pc',  src_suffix = '.pc.in')
env.Append(BUILDERS = {'Template' : templateBld})


#Sources
sources = Split("""
   fontconv.cpp
   fontmap.cpp
   lib.cpp
   regex.cpp
   WordBuilder.cpp
   SentenceList.cpp
   """)
sources = map(lambda x:os.path.join("waitzar",x), sources)
headers = map(lambda x:re.sub("[.]cpp$", ".h", x), sources)

#Boost.Python integration
sources.append(os.path.join("waitzar",'PythonSpecs.cpp'))

#Data
model_data = Split('data/model2/Myanmar.model data/model2/mywords.txt')

#Pkg-config
env.Template('waitzar-'+LIBRARY_VERSION, 'waitzar')

#Build the static library
wz_static = env.StaticLibrary('waitzar', sources, LIBS=required_libs, LIBPATH = extra_libs)

#Build the shared library
wz_shared = env.SharedLibrary('waitzar', sources, LIBS=required_libs, LIBPATH = extra_libs)

#Install the static library
#     libwaitzar.so
#     libwaitzar.la
env.Install('/usr/lib', [wz_shared, wz_static])

#Install our Boost.Python shared library
env.Install('/usr/lib/python2.6/dist-packages', wz_shared)

#Install the shared library
env.InstallAs(['/usr/lib/libwaitzar.so.1', '/usr/lib/libwaitzar.so.1.0.0'], [wz_shared, wz_shared])

#Install header files
env.Install('/usr/include/waitzar', headers)

#Install our shared library data
env.Install('/usr/share/waitzar/model2', model_data)

#Installation of the pkgconfig file
env.Install('/usr/lib/pkgconfig/', 'waitzar.pc')





