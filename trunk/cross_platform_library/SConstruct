import os
import sys
import re


#Some constants defining our library
LIBRARY_API_VERSION = '1.0.0'
LIBRARY_VERSION     = '1.0'
LIBRARY_NAME        = 'waitzar'

#Over-rideable on the command line
prefix              = '/usr'
exec_prefix         = '/usr'
libdir              = prefix + '/lib'
includedir          = prefix + '/include'


#Our custom build variables
vars = Variables()
vars.Add(BoolVariable('useboost', 'Set to "no" to build without Boost (Python) runtime support.', True))


#Import the path from the user's environment
env = Environment(variables = vars, ENV = {'PATH' : os.environ['PATH']})

#Set up "help" options
Help(vars.GenerateHelpText(env))

#Did they provide invalid options?
unknown = vars.UnknownVariables()
if unknown:
    print "Unknown variables:", unknown.keys()
    Exit(1)

#Are they trying to install on Windows?
if 'install' in COMMAND_LINE_TARGETS and env['PLATFORM']=='win32':
    print "Error: Attempting to 'install' on Windows:\n    Running 'install' in Windows is not a good idea (it will put a Unix " + \
          "build tree into the \n    root folder of the current drive, which is almost definitely _not_ what you intended."
    Exit(1)


#Attempt to fix the path if the user is on windows and the path
# doesn't contain kernel32.lib
extra_libs = []
if env['PLATFORM']=='win32':
   extra_libs.append('C:/Program Files/Microsoft SDKs/Windows/v6.0A/lib')
   env['ENV']['TMP'] = os.environ['TMP'] 
   if env['useboost']:
       extra_libs.append('D:/Programs/boost/boost_1_40/lib')
   
#Prevent Windows users from messing up their directory structure; hide the "install" alias from them.
if env['PLATFORM'] != 'win32':
   env.Alias('install', '/usr')

#Exception handling on Windows
if env['PLATFORM'] == 'win32':
    env.Append(CPPFLAGS = '/EHsc')

   
   
#Requires libboost to build ----we've GOT to clean this up for release.
#  (how to do this on Windows?)
required_libs = []
if env['useboost']:
    if env['PLATFORM'] == 'win32':
        #Note: Boost currently complains about mixing shared and static code (but it does this in the "include" step.)
        #      I really have no idea how to fix this...
        env.Append(CPPPATH = ['C:/Python26/include', 'D:/Programs/boost/boost_1_40'])
        env.Append(CPPPATH = ['C:/Program Files/Microsoft Visual Studio 9.0/VC/include', 'C:/Program Files/Microsoft SDKs/Windows/v6.0A/Include']) #Ugh... 
        #env.Append(INCLUDE = ['C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\Include', 'C:\\Program Files\\Microsoft Visual Studio 9.0\\VC\\include'])
        #env.Append(LIB = ['C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\Lib;C:\\Program Files\\Microsoft Visual Studio 9.0\\VC\\lib'])
        required_libs.append('boost_python-vc90-mt-1_40')
    else:
        env.Append(CPPPATH = ['/usr/include/python2.6', '/usr/include/boost'])
        required_libs.append('boost_python-mt-py26')



#Out own builder: template a file with some arguments
#  target = which file(s) to save template output to (use str() to get the paths)
#  source = which file(s) to perform templating on (use str() to get the paths)
#  env    = the construction environment, if needed
#At the moment, we substitute all relevant variables from the build environment
#  You will have to modify this if you need more substituted
def template_file(target, source, env):
    from string import Template
    for i in xrange(len(source)):
        #Open, read, close
        srcFile = open(str(source[i]), 'r')
        src = Template(srcFile.read())
        srcFile.close()
        
        #Substitute
        # Add new variables here, as necessary
        # TODO: Maybe we can put this dict. in env? That makes sense...
        src = src.substitute( 
            LIBRARY_API_VERSION = LIBRARY_API_VERSION,
            LIBRARY_VERSION     = LIBRARY_VERSION,
            LIBRARY_NAME        = LIBRARY_NAME,
	    libdir              = libdir,
            includedir          = includedir
        )
        
        #Open, output, close
        tgt = open(str(target[i]), 'w')
        tgt.write(src)
        tgt.close()

    #Success: return 'None'
    return None
templateBld = Builder(action = template_file,  suffix = '.pc',  src_suffix = '.pc.in')
env.Append(BUILDERS = {'Template' : templateBld})


#Sources
sources = Split("""
   fontconv.cpp
   fontmap.cpp
   lib.cpp
   regex.cpp
   WordBuilder.cpp
   SentenceList.cpp
   """)
sources = map(lambda x:os.path.join("waitzar",x), sources)
headers = map(lambda x:re.sub("[.]cpp$", ".h", x), sources)

#Boost.Python integration
if env['useboost']:
    sources.append(os.path.join("waitzar",'PythonSpecs.cpp'))

#Data
model_data = Split('data/model2/Myanmar.model data/model2/mywords.txt')

#Pkg-config
env.Template('waitzar-'+LIBRARY_VERSION, 'waitzar')

#Build the static library
#wz_static = env.StaticLibrary('waitzar', sources, LIBS=required_libs, LIBPATH = extra_libs)
wz_static = []

#Build the shared library
wz_shared = env.SharedLibrary('waitzar', sources, LIBS=required_libs, LIBPATH = extra_libs)
#wz_shared = []

#Install the static library
#     libwaitzar.so
#     libwaitzar.la
env.Install('/usr/lib', [wz_shared, wz_static])

#Install our Boost.Python shared library
env.Install('/usr/lib/python2.6/dist-packages', wz_shared)

#Install the shared library
env.InstallAs(['/usr/lib/libwaitzar.so.1', '/usr/lib/libwaitzar.so.1.0.0'], [wz_shared, wz_shared])

#Install header files
env.Install('/usr/include/waitzar', headers)

#Install our shared library data
env.Install('/usr/share/waitzar/model2', model_data)

#Installation of the pkgconfig file
env.Install('/usr/lib/pkgconfig/', 'waitzar.pc')





