# The hotkey is defined as:
#    [modifier] letter
# Modifiers include: ! for alt, ^ for control, and + for shift
# The letter can be any of the modifiers, and any letter. 
# Space is represented by an underscore _
# The final character is the letter; all preceeding characters
# are condidered modifiers (e.g., !+ implies "Hold Alt and Press Shift")
# Some examples:
#    ^m     "Control + m"
#    ^!_    "Control+Alt + Space"
#    !+    "Alt + Shift" 
#NO_LINUX: This option does not work under Linux (set the hotkey from the SCIM control panel)
hotkey = ^+


# If "no", a warning box will not display when using
#  a custom dictionary
#NO_LINUX: This option makes no sense under Linux, because scim reloads the waitzar module regularly.
mywordswarning = no


# If "yes", each typed word becomes part of a phrase; the user
#  must type "Space" again to enter the entire phrase. The benefit of doing it this way is 
#  that Wait Zar can "figure out" what word you want based on the previous words.
# Also, you can use the arrow keys to move left/right between words, like a mini text editor.
#NO_LINUX: WaitZar under Linux does not support this option; the preedit string is really preferred. 
powertyping = yes


# If "yes", WaitZar will show a useful popup when the program first loads.
# This is to help new users learn how WaitZar should work; advanced users can turn it
#  off if they find it distracting.
#NO_LINUX: WaitZar under Linux has no use for this option.
ballooononstart = yes


# If "yes", WaitZar will detect if it is running on Vista, un-elevated, and will
#  always request the user to elevate itself. This can help fix some weird bugs
#  with UAC in Vista, but it is generally not necessary to turn on.
#NO_LINUX: WaitZar under Linux should never be run by root
alwayselevate = no


# If "yes", we try to position the WaitZar window over the caret
#  when the user first types. If "no", we just put the window anywhere
trackcaret = yes



# If "yes", the sentence window will always display below the 
#  current word window.
#NO_LINUX: Windows auto-lock to the text you're entering in Linux, so this option makes no sense.
lockwindows = yes


# If "yes", typing 0..9 will yield Burmese numbers 0 to 9. If "no", Wait Zar will type (and catch) Arabic numerals.
#LINUX: This option works under Linux.
burmesenumerals = yes


# Sets the default output encoding. Allowed values:
#  unicode   -Outputs according to the Unicode 5.1 official encoding. (Recommended)
#  zawgyi    -Outputs according to the Zawgyi-One custom Unicode encoding.
#  wininnwa  -Outputs according to the Win Innwa custom ASCII encoding.
# FYI: You can also specify "padauk", "parabaik", or "myanmar3"... 
#  all of which default to "unicode"
#LINUX: This option works under Linux.
defaultencoding = unicode


# If "yes", we do not load Myanmar.model, and instead only load words from mywords.txt
ignoremodel = no

#Settings for a custom dictionary
# 0 = default
# Anything else means make it that size
dictionarysize = 0
nexussize = 0
prefixsize = 0




