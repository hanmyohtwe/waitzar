/**
 * The Key Magic PEG syntax file.
 *  This file assumes that the source has been pre-parsed to remove comments and spaces.
 */

file = 
      proposition+

digit = 
      [0-9]

char =
      [a-zA-Z_]
      
charnum =
      char / digit

proposition = 
      (variable/rule) '\n'

variable = 
      key:var_name  '=' value:var_item_list   { variables[key] = value; }

var_name = 
      '$'  val:charnum+   { return val.join(''); }
      
var_item_list = 
      v1:var_item vN:var_item_opt*   { return [v1].concat(vN); }
      
var_item_opt = 
      '+' val:var_item  { return val; }

var_item = 
      val:string         { return new Prim('STRING', val, -1); }
    / val:uni_letter     { return new Prim('STRING', val, -1); }
    / null               { return new Prim('STRING', '', -1); }
    / val:var_name       { return new Prim('VAR_NAME', val, -1); }
    / val:virt_key_unit  { return new VKey('VIRT_KEY', [], val); }
    / val:switch         { switches[val]=false; return new Prim('SWITCH', val, -1); }
    / val:var_element    { return new Prim('VAR_ELEMENT', val.name, val.id); }


null = 
      'null' / 'NULL'

q1 = "'"
q2 = '"'
bs = '\\'
      
string = 
      (q1  val:str1  q1) { return "'" + val.join('') + "'"; }
    / (q2  val:str2  q2) { return '"' + val.join('') + '"'; }

str1 =     
      (!q1 v:strchar { return v; })*

str2 =
      (!q2 v:strchar { return v; })*

strchar =
      (bs esc) / . 
      
esc =
      bs / q1 / q2 / uni_letter 

uni_letter = 
      [uU] v1:hex v2:hex v3:hex v4:hex  { return String.fromCharCode(parseInt(v1+v2+v3+v4, 16)); }

hex = 
      [a-fA-F0-9]
 
 
virt_key_unit = 
      vk_mod / vk_code 
      
vk_mod = 
      'VK_SHIFT' 
    / 'VK_ALT'  / 'VK_MENU' { return 'VK_ALT'; }
    / 'VK_CTRL' / 'VK_CONTROL' { return 'VK_CTRL'; }


switch = 
      '(' val:((q1 charnum+ q1)/val:(q2 charnum+ q2)) ')'  { return val[1].join(''); }
        
        
var_element =
      key:var_name  '['  v1:(!'0' v:digit{return v;}) vN:digit*  ']'  { value=parseInt(v1+vN.join('')); return {'name':key,'id':value} }



rule = 
      lhs:rule_lhs '=>'  rhs:rule_rhs { rules.push({'lhs':lhs,'rhs':rhs}); }

virt_key_press = 
      '<' mods:vk_mod_item* val:virt_key_unit '>'   { return new VKey('VIRT_KEY', mods, val); }
      
vk_mod_item =
      val:vk_mod '&'  { return val; }
      
rule_lhs =
      lhsN:rule_lhs_item_opt* lhs1:(rule_lhs_item/virt_key_press)   { return lhsN.concat([lhs1]); }
      
rule_lhs_item_opt = 
      val:rule_lhs_item '+' { return val; }
      

rule_lhs_item =
      wild_var
    / var_item
    / wild          { return new Prim('WILD', '', -1); }
    
wild = 'ANY'
    
wild_var = 
      (val:var_name '[*]')   { return new Prim('WILD_VAR_ALL', val, -1); }
    / (val:var_name '[^]')   { return new Prim('WILD_VAR_NONE', val, -1); }
    
rule_rhs =
      rhs1:rule_rhs_item rhsN:rule_rhs_item_opt*    { return [rhs1].concat(rhsN); }
      
rule_rhs_item_opt = 
      '+' val:rule_rhs_item { return val; }

rule_rhs_item = 
      val:backref       { return new Prim('BACKREF', '', val); }
    / val:wild_backref  { return new Prim('WILD_BACKREF', val.name, val.id); }
    / var_item

backref = 
      '$' v1:(!'0' v:digit{return v;}) vN:digit*   { return parseInt(v1+vN.join('')); }
      
wild_backref = 
      key:var_name '[' '$' v1:(!'0' v:digit{return v;}) vN:digit* ']' { value=parseInt(v1+vN.join('')); return {'name':key,'id':value} }
      


//Listed last (it's long)
vk_code = 
      'VK_TAB' 
	/ 'VK_RETURN' {return 'VK_ENTER';} / 'VK_ENTER' 
	/ 'VK_SHIFT' 
	/ 'VK_CONTROL' {return 'VK_CTRL';} / 'VK_CTRL' 
	/ 'VK_ALT' / 'VK_MENU' {return 'VK_ALT';}
	/ 'VK_PAUSE' 
	/ 'VK_CAPITAL' {return 'VK_CAPSLOCK';} / 'VK_CAPSLOCK' 
	/ 'VK_KANJI' 
	/ 'VK_ESCAPE' 
	/ 'VK_SPACE' 
	/ 'VK_PRIOR' 
	/ 'VK_NEXT' 
	/ 'VK_DELETE' 
	/ 'VK_KEY_0' 
	/ 'VK_KEY_1' 
	/ 'VK_KEY_2' 
	/ 'VK_KEY_3' 
	/ 'VK_KEY_4' 
	/ 'VK_KEY_5' 
	/ 'VK_KEY_6' 
	/ 'VK_KEY_7' 
	/ 'VK_KEY_8' 
	/ 'VK_KEY_9' 
	/ 'VK_KEY_A' 
	/ 'VK_KEY_B' 
	/ 'VK_KEY_C' 
	/ 'VK_KEY_D' 
	/ 'VK_KEY_E' 
	/ 'VK_KEY_F' 
	/ 'VK_KEY_G' 
	/ 'VK_KEY_H' 
	/ 'VK_KEY_I' 
	/ 'VK_KEY_J' 
	/ 'VK_KEY_K' 
	/ 'VK_KEY_L' 
	/ 'VK_KEY_M' 
	/ 'VK_KEY_N' 
	/ 'VK_KEY_O' 
	/ 'VK_KEY_P' 
	/ 'VK_KEY_Q' 
	/ 'VK_KEY_R' 
	/ 'VK_KEY_S' 
	/ 'VK_KEY_T' 
	/ 'VK_KEY_U' 
	/ 'VK_KEY_V' 
	/ 'VK_KEY_W' 
	/ 'VK_KEY_X' 
	/ 'VK_KEY_Y' 
	/ 'VK_KEY_Z' 
	/ 'VK_NUMPAD0' 
	/ 'VK_NUMPAD1' 
	/ 'VK_NUMPAD2' 
	/ 'VK_NUMPAD3' 
	/ 'VK_NUMPAD4' 
	/ 'VK_NUMPAD5' 
	/ 'VK_NUMPAD6' 
	/ 'VK_NUMPAD7' 
	/ 'VK_NUMPAD8' 
	/ 'VK_NUMPAD9' 
	/ 'VK_MULTIPLY' 
	/ 'VK_ADD' 
	/ 'VK_SEPARATOR' 
	/ 'VK_SUBTRACT' 
	/ 'VK_DECIMAL' 
	/ 'VK_DIVIDE' 
	/ 'VK_F1' 
	/ 'VK_F2' 
	/ 'VK_F3' 
	/ 'VK_F4' 
	/ 'VK_F5' 
	/ 'VK_F6' 
	/ 'VK_F7' 
	/ 'VK_F8' 
	/ 'VK_F9' 
	/ 'VK_F10' 
	/ 'VK_F11' 
	/ 'VK_F12' 
	/ 'VK_LSHIFT' 
	/ 'VK_RSHIFT' 
	/ 'VK_LCONTROL' {return 'VK_LCTRL';} / 'VK_LCTRL' 
	/ 'VK_RCONTROL' {return 'VK_RCTRL';} / 'VK_RCTRL' 
	/ 'VK_LMENU' {return 'VK_LALT';} / 'VK_LALT' 
	/ 'VK_RMENU' {return 'VK_RALT';} / 'VK_RALT' 
	/ 'VK_OEM_1' {return 'VK_COLON';} / 'VK_COLON' 
	/ 'VK_OEM_PLUS' 
	/ 'VK_OEM_COMMA' 
	/ 'VK_OEM_MINUS' 
	/ 'VK_OEM_PERIOD' 
	/ 'VK_OEM_2' {return 'VK_QUESTION';} / 'VK_QUESTION' 
	/ 'VK_OEM_3' {return 'VK_CFLEX';} / 'VK_CFLEX' 
	/ 'VK_OEM_4' {return 'VK_LBRACKET';} / 'VK_LBRACKET' 
	/ 'VK_OEM_5' {return 'VK_BACKSLASH';} / 'VK_BACKSLASH' 
	/ 'VK_OEM_6' {return 'VK_RBRACKET';} / 'VK_RBRACKET' 
	/ 'VK_OEM_7' {return 'VK_QUOTE';} / 'VK_QUOTE' 
	/ 'VK_OEM_8' {return 'VK_EXCM';} / 'VK_EXCM' 
	/ 'VK_OEM_102' {return 'VK_LESSTHEN';} / 'VK_LESSTHEN' 
	/ 'VK_BACK'

