/**
 * The Key Magic Pre-Parser PEG syntax file.
 *  This file knows no Key Magic semantics, except options and anything needed to remove spaces properly.
 */

file = 
      options?
      val:line_or_comment+
      blanklines    { return val.join(''); }

ws = 
      [ \t\r]*

options = 
      blanklines
      '/*'
      ((&'@' option)/(!'*/' .))*
      '*/' 

option = 
      '@' name:option_name ws '=' ws value:option_value ws { options[name] = value; }

option_name =
      val:char+  { return val.join(''); }

char =
      [a-zA-Z_]

digit = 
      [0-9]

charnum = 
      char / digit

symbol = 
      digit / [*^]

option_value =
      ('"' val:[^"]* '"') { return val.join(''); }
    / ("'" val:[^']* "'") { return val.join(''); }

skipnl = 
      '\\' ws '\n'

ignore = 
      (skipnl / comment / [ \t\r])* 

comment = 
      ('/*' (!'*/' .)* '*/')  { return ''; }
    / ('//' (!'\n' .)*)       { return ''; }

line_or_comment = 
      blanklines
      val:(comment/line) { return val; }

line = 
    lhs1:item  lhs2:more_items* 
    ignore arrow:('=>'/'=')  
    ignore rhs1:item rhs2:more_items*    { return lhs1 + lhs2.join('') + arrow + rhs1 + rhs2.join('') + '\n'; }

blanklines =
      [ \t\r\n]*

more_items = 
      ignore '+' ignore val:item ignore { return '+' + val; }

item = 
      keyword
    / variable
    / string
    / virtkey

keyword =
      val:charnum+  { return val.join(''); }
      
variable =
      '$' v1:keyword v2:var_suffix?  { return '$' + v1 + v2; }

var_suffix =
      '[' v1:'$'? v2:symbol+ ']'   { return '[' + v1 + v2.join('') + ']'; }
      
uni = 
      v1:[uU] v2:hex v3:hex v4:hex v5:hex  { return v1 + v2 + v3 + v4 + v5; }

hex = 
      [a-fA-F0-9]

vkcode = 
      pre:'VK_' post:[a-zA-Z0-9_]+   { return pre + post.join(''); }

virtkey = 
      '<' ignore mods:mod* ignore code:keyword ignore '>' { return '<' + mods.join('') + code + '>'; }

mod = 
      val:keyword ignore '&' ignore   { return val + '&'; }

q1 = "'"
q2 = '"'
bs = '\\'

//Switches are represented as strings, for now.
string = 
      l:'('? val:str_val r:')'? { return l + val + r; }

str_val =
      (q1  val:str1  q1) { return "'" + val.join('') + "'"; }
    / (q2  val:str2  q2) { return '"' + val.join('') + '"'; }

str1 =     
      (!q1 v:strchar { return v; })*

str2 =
      (!q2 v:strchar { return v; })*

strchar =
      (v1:bs v2:esc) { return v1 + v2; }
    / .
      
esc =
      bs / q1 / q2 / uni
