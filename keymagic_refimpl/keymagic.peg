file = 
      (options / sp) 
      (proposition / blankline)+ 
      EOF?  //Simulated with 0x04
      
//TO-DO: Test
EOF = '\x04'

options = sp_ 
      '/*' sp_
         (option / (!'*/' .))* 
      '*/' sp_ 

space = 
      [ \t\r]

sp_ = 
      space*

sp = 
      (skipnl / space / comment)*

skipnl = 
      '\\' sp_ '\n'

comment = 
      ('/*' (!'*/' .)* '*/') 
    / ('//' (!'\n' .)* '\n')
    
blankline =
      sp '\n'

option = 
      '@' name:option_name sp_ '=' sp_ value:option_value sp_ { options[name] = value; }

option_name =
      val:char+  { return val.join(''); }

option_value =
      ('"' val:[^"]* '"') { return val.join(''); }
    / ("'" val:[^']* "'") { return val.join(''); }

char =
      [a-zA-Z_]

proposition = 
      sp variable / rule  sp '\n'

variable = 
      key:var_name sp '=' sp value:var_item_list sp   { variables[key] = value; }

var_name = 
      '$'  val:charnum+   { return val.join(''); }

charnum =
      char / digit
      
digit = 
      [0-9]
      
var_item_list = 
      v1:var_item vN:var_item_opt*   { return [v1].concat(vN); }
      
var_item_opt = 
      sp '+' sp val:var_item  { return val; }

var_item = 
      val:string         { return new Prim('STRING', val, -1); }
    / val:uni_letter     { return new Prim('STRING', val, -1); }
    / null               { return new Prim('STRING', '', -1); }
    / val:var_name       { return new Prim('VAR_NAME', val, -1); }
    / val:virt_key_unit  { return new Prim('VIRT_KEY', val, -1); }   //TODO: We need a different constructor for virtKeys
    / val:switch         { switches[val]=false; return new Prim('SWITCH', val, -1); }
    / val:var_element    { return new Prim('VAR_ELEMENT', val.name, val.id); }


null = 
      'null' / 'NULL'

q1 = "'"
q2 = '"'
bs = '\\'
      
string =
      (q1  val:(!q1 strchar)*  q1) { return val.join(''); }
    / (q2  val:(!q2 strchar)*  q2) { return val.join(''); }

strchar =
      (bs esc) / . 
      
esc =
      bs / q1 / q2 / uni_letter 

uni_letter = 
      [uU] v1:hex v2:hex v3:hex v4:hex  { return String.fromCharCode(parseInt(v1+v2+v3+v4, 16)); }

hex = 
      [a-fA-F0-9]
 
 
virt_key_unit = 
      vk_mod / vk_code 
      
vk_mod = 
      'VK_CTRL' / 'VK_SHIFT' / 'VK_ALT' 


switch = 
      '(' (q1 charnum+ q1) 
        / (q2 charnum+ q2) ')'
        
        
var_element =
      key:var_name  '['  v1:(!'0' digit) vN:digit*  ']'  { value=parseInt(v1+vN.join('')); return {'name':key,'id':value} }




//TEMP
rule = [^\n]*



//Listed last (it's long)
vk_code = 
      'VK_BACK' 
	/ 'VK_TAB' 
	/ 'VK_RETURN' / 'VK_ENTER' 
	/ 'VK_SHIFT' 
	/ 'VK_CONTROL' / 'VK_CTRL' 
	/ 'VK_ALT' / 'VK_MENU' 
	/ 'VK_PAUSE' 
	/ 'VK_CAPITAL' / 'VK_CAPSLOCK' 
	/ 'VK_KANJI' 
	/ 'VK_ESCAPE' 
	/ 'VK_SPACE' 
	/ 'VK_PRIOR' 
	/ 'VK_NEXT' 
	/ 'VK_DELETE' 
	/ 'VK_KEY_0' 
	/ 'VK_KEY_1' 
	/ 'VK_KEY_2' 
	/ 'VK_KEY_3' 
	/ 'VK_KEY_4' 
	/ 'VK_KEY_5' 
	/ 'VK_KEY_6' 
	/ 'VK_KEY_7' 
	/ 'VK_KEY_8' 
	/ 'VK_KEY_9' 
	/ 'VK_KEY_A' 
	/ 'VK_KEY_B' 
	/ 'VK_KEY_C' 
	/ 'VK_KEY_D' 
	/ 'VK_KEY_E' 
	/ 'VK_KEY_F' 
	/ 'VK_KEY_G' 
	/ 'VK_KEY_H' 
	/ 'VK_KEY_I' 
	/ 'VK_KEY_J' 
	/ 'VK_KEY_K' 
	/ 'VK_KEY_L' 
	/ 'VK_KEY_M' 
	/ 'VK_KEY_N' 
	/ 'VK_KEY_O' 
	/ 'VK_KEY_P' 
	/ 'VK_KEY_Q' 
	/ 'VK_KEY_R' 
	/ 'VK_KEY_S' 
	/ 'VK_KEY_T' 
	/ 'VK_KEY_U' 
	/ 'VK_KEY_V' 
	/ 'VK_KEY_W' 
	/ 'VK_KEY_X' 
	/ 'VK_KEY_Y' 
	/ 'VK_KEY_Z' 
	/ 'VK_NUMPAD0' 
	/ 'VK_NUMPAD1' 
	/ 'VK_NUMPAD2' 
	/ 'VK_NUMPAD3' 
	/ 'VK_NUMPAD4' 
	/ 'VK_NUMPAD5' 
	/ 'VK_NUMPAD6' 
	/ 'VK_NUMPAD7' 
	/ 'VK_NUMPAD8' 
	/ 'VK_NUMPAD9' 
	/ 'VK_MULTIPLY' 
	/ 'VK_ADD' 
	/ 'VK_SEPARATOR' 
	/ 'VK_SUBTRACT' 
	/ 'VK_DECIMAL' 
	/ 'VK_DIVIDE' 
	/ 'VK_F1' 
	/ 'VK_F2' 
	/ 'VK_F3' 
	/ 'VK_F4' 
	/ 'VK_F5' 
	/ 'VK_F6' 
	/ 'VK_F7' 
	/ 'VK_F8' 
	/ 'VK_F9' 
	/ 'VK_F10' 
	/ 'VK_F11' 
	/ 'VK_F12' 
	/ 'VK_LSHIFT' 
	/ 'VK_RSHIFT' 
	/ 'VK_LCONTROL' / 'VK_LCTRL' 
	/ 'VK_RCONTROL' / 'VK_RCTRL' 
	/ 'VK_LMENU' / 'VK_LALT' 
	/ 'VK_RMENU' / 'VK_RALT' 
	/ 'VK_OEM_1' / 'VK_COLON' 
	/ 'VK_OEM_PLUS' 
	/ 'VK_OEM_COMMA' 
	/ 'VK_OEM_MINUS' 
	/ 'VK_OEM_PERIOD' 
	/ 'VK_OEM_2' / 'VK_QUESTION' 
	/ 'VK_OEM_3' / 'VK_CFLEX' 
	/ 'VK_OEM_4' / 'VK_LBRACKET' 
	/ 'VK_OEM_5' / 'VK_BACKSLASH' 
	/ 'VK_OEM_6' / 'VK_RBRACKET' 
	/ 'VK_OEM_7' / 'VK_QUOTE' 
	/ 'VK_OEM_8' / 'VK_EXCM' 
	/ 'VK_OEM_102' / 'VK_LESSTHEN' 
